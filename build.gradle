plugins {
    id 'java-library'
    id 'com.github.johnrengelman.shadow' version '5.2.0'
}

sourceCompatibility = '17'
targetCompatibility = '17'

group 'net.babblebot'

ext {
    mainDevClass = "${project.group}.${rootProject.name}.DevMain".toString()
    babblebotVersion = 'v3.0.0-rc.27'
}


repositories {
    mavenCentral()
    maven { url 'https://maven.babblebot.net/' }
}

project.configurations.api.canBeResolved(true)

dependencies {
    implementation "net.babblebot:server:${babblebotVersion}"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa:3.1.0"
    annotationProcessor 'org.projectlombok:lombok:1.18.28'
    implementation 'org.slf4j:slf4j-api:2.0.7'

    implementation 'org.javassist:javassist:3.26.0-GA'
    implementation 'com.github.walkyst:lavaplayer-fork:1.4.2'

    implementation 'com.discord4j.discord4j:discord4j-voice:3.2.4'
    implementation 'com.discord4j.discord4j:discord4j-core:3.2.4'
    api 'com.github.kokorin.jaffree:jaffree:0.9.3'

    testImplementation 'org.springframework.boot:spring-boot-starter-test:3.1.0'
}

tasks.named('test') {
    useJUnitPlatform()
}

shadowJar {
    archivesBaseName = rootProject.name
    exclude("${project.mainDevClass.replace('.', '/')}*")
    exclude("${project.mainDevClass.replace('.', '/').replace('DevMain', 'config/DevProperties')}*")
    configurations = [project.configurations.api]
    archiveAppendix = ''
}

jar {
    exclude("${project.mainDevClass.replace('.', '/')}*")
    exclude("${project.mainDevClass.replace('.', '/').replace('DevMain', 'config/DevProperties')}*")
}

task generateVersionFile {
    group 'babblebot'
    doLast {
        String version = project.babblebotVersion
        if (version.startsWith("v")) {
            version = version.substring(1)
        }
        def file = new File("$project.buildDir/resources/main/version.txt")
        if (!file.exists()) {
            println("Ran Create Properties")
            new File("$project.buildDir/resources/main/").mkdirs()
            file.createNewFile()
        }
        file.write(version)
    }
}

task runBabblebot(type: JavaExec) {
    dependsOn build, generateVersionFile
    main = project.mainDevClass
    classpath = sourceSets.main.runtimeClasspath
    group 'babblebot'
}
